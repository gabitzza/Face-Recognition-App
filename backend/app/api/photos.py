import os
import shutil
from fastapi import APIRouter, UploadFile, File, Depends, HTTPException
from sqlalchemy.orm import Session
from app.core.database import SessionLocal
from app.models.user import User
from app.models.photos import Photo
from datetime import datetime
from .auth import get_current_user
from fastapi import Form
import hashlib

router = APIRouter()

# Calea absolutÄƒ cÄƒtre folderul 'uploads' din backend/app
UPLOAD_FOLDER = os.path.join(os.path.dirname(os.path.dirname(__file__)), "uploads")



# VerificÄƒm dacÄƒ calea este calculatÄƒ corect
print(f"Upload folder path: {UPLOAD_FOLDER}")

# CreÄƒm directorul dacÄƒ nu existÄƒ
if not os.path.exists(UPLOAD_FOLDER):
    print("Folderul uploads nu existÄƒ. CreÄƒm folderul...")
    os.makedirs(UPLOAD_FOLDER)

# DB dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def calculate_file_hash(file_obj):
    hasher = hashlib.sha256()
    file_obj.seek(0)
    while chunk := file_obj.read(8192):
        hasher.update(chunk)
    file_obj.seek(0)  # reset pointer
    return hasher.hexdigest()

@router.post("/upload-photo")
def upload_photo(
    file: UploadFile = File(...),
    contest_id: int = 1,
    album_title: str = Form(...),  # AdÄƒugÄƒm album_title
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
 
):
    

    print(f"Album title received: '{album_title}'")  # Log titlu album
    print(f"File received: {file.filename}")  # Log fiÈ™ie
    if current_user.role != "fotograf":
        raise HTTPException(status_code=403, detail="Doar fotografii pot Ã®ncÄƒrca poze")
    
    if not album_title:
        raise HTTPException(status_code=400, detail="Titlul albumului nu poate fi gol.")

    print(f"Album title received: '{album_title}'")  # Log titlu album
    print(f"File received: {file.filename}")  # Log fiÈ™ierul

   # 1. VerificÄƒm rolul
    if current_user.role != "fotograf":
        raise HTTPException(status_code=403, detail="Doar fotografii pot Ã®ncÄƒrca poze")

    # 2. VerificÄƒm titlul albumului
    if not album_title:
        raise HTTPException(status_code=400, detail="Titlul albumului nu poate fi gol.")

    # 3. CalculÄƒm hash-ul ÃŽNAINTE sÄƒ citim fiÈ™ierul complet
    file_hash = calculate_file_hash(file.file)

    # 4. VerificÄƒm Ã®n DB dacÄƒ fiÈ™ierul existÄƒ deja
    existing_photo = db.query(Photo).filter_by(
        photo_hash=file_hash,
        contest_id=contest_id,
        photographer_id=current_user.id
    ).first()

    if existing_photo:
        raise HTTPException(status_code=409, detail="AceastÄƒ pozÄƒ a fost deja Ã®ncÄƒrcatÄƒ.")

    # 5. SalvÄƒm fiÈ™ierul fizic
    album_folder_path = os.path.join(UPLOAD_FOLDER, album_title)
    if not os.path.exists(album_folder_path):
        os.makedirs(album_folder_path)

    file_path = os.path.join(album_folder_path, file.filename)
    with open(file_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)

    # 6. SalvÄƒm Ã®n baza de date
    photo = Photo(
        image_path=f"{album_title}/{file.filename}",
        contest_id=contest_id,
        photographer_id=current_user.id,
        uploaded_at=datetime.utcnow(),
        photo_hash=file_hash  # ðŸ‘ˆ AdÄƒugat corect aici
    )

    db.add(photo)
    db.commit()
    db.refresh(photo)

    return {"message": "Foto Ã®ncÄƒrcatÄƒ cu succes", "photo_id": photo.id}